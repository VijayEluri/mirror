[chapter Method]

Method Manipulation using Mirror. Just to inform, method lookup is also done on 
superclasses.

[section Reflecting]

Reflecting a method by name (will return null if not found):

[java]
Class clazz;
Method m = new Mirror().on(clazz).reflect().method("methodName").withoutArgs();
[/java]

Reflect a method by arguments (will return null if not found):

[java]
Class clazz;
Method m = new Mirror().on(clazz).reflect().method("methodName")
		   .withArgs(String.class, Object.class);
[/java]

Reflecting all methods of a class (will return an empty list if none found):

[java]
Class clazz;
List<Method> l = new Mirror().on(clazz).reflectAll().methods();
[/java]

Reflecting all getters of a class (will return an empty list if none found):

[java]
Class clazz;
List<Method> l = new Mirror().on(clazz).reflectAll().getters();
[/java]

Reflecting all setters of a class (will return an empty list if none found):

[java]
Class clazz;
List<Method> l = new Mirror().on(clazz).reflectAll().setters();
[/java]

Reflecting all methods of class that matches a Matcher<Method> (will return an empty list if none found):

[java]
Class clazz;
List<Method> l = new Mirror().on(clazz).reflectAll()
                               .methodsMatching(new YourCustomMatcher());
[/java]

[section Invoking Methods]

Invoking a static method:

[java]
Class clazz;
Object returnValue = new Mirror().on(clazz).invoke().method("methodName")
					 .withArgs(value1, value2);
[/java]

Invoking an instance method:

[java]
Object target;
Object returnValue = new Mirror().on(target).invoke().method("methodName").withoutArgs();
[/java]

You can also pass a java.lang.reflect.Method instead of a methodName String:

Invoking an instance method:

[java]
Method aMethod;
Object target;
Object returnValue = new Mirror().on(target).invoke().method(aMethod)
						.withArgs(value1, value2);
[/java]

Invoking a setter method:

[java]
Field field;
Object target;
new Mirror().on(target).invoke().setterFor(field).withValue(value1);
new Mirror().on(target).invoke().setterFor("fieldName").withValue(value1);
[/java]

Invoking a getter method:

[java]
Field field
Object target;
Object returnValue = new Mirror().on(target).invoke().getterFor(field);
Object returnValue = new Mirror().on(target).invoke().getterFor("fieldName");
[/java]