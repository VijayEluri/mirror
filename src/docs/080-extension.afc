[chapter Extension]

Now that you know your way around Mirror, maybe you want something more.

[section Reflection Providers]

Basically, all dirty work is handled by a collection of interfaces we call Reflection Providers. 

These are the real Mirror's core.

Today we only have ::net.vidageek.mirror.provider.java.PureJavaReflectionProvider::, that uses only 
**Java Reflection API**.

But you can just implement your own ::net.vidageek.mirror.provider.ReflectionProvider:: to give you
more control over what's happening.

Actually, ::net.vidageek.mirror.provider.ReflectionProvider:: is just a wrapper for more specific
interfaces: 

[list]
* ::net.vidageek.mirror.provider.AnnotatedElementReflectionProvider.java::
* ::net.vidageek.mirror.provider.ClassReflectionProvider.java::
* ::net.vidageek.mirror.provider.ConstructorReflectionProvider.java::
* ::net.vidageek.mirror.provider.FieldReflectionProvider.java::
* ::net.vidageek.mirror.provider.MethodReflectionProvider.java::
[/list]

But how do you make Mirror use your Reflection Provider? Take a look at Extension -> Configuration.

[section Sun Reflection Provider]

There is an implementation of ReflectionProvider that relies on some Sun internal classes to speedup 
reflection by bypassing security checks. This provider may be 25% faster than the default provider 
depending on how you're using mirror.

Warning!!! This will probably only work on Sun JVM 1.5 and 1.6.

To use it, you need to add it to the build path of your project. You can download it's jar at 
http://github.com/vidageek/mirror/downloads or http://maven.vidageek.net/net/vidageek/mirror-sun15-provider .

If you use maven, you can just add it as a dependency on your pom.xml
[xml]
<dependencies>
...
	<dependency>
	    <groupId>net.vidageek</groupId>
	    <artifactId>mirror-sun15-provider</artifactId>
	    <version>1.6</version>
	</dependency>
...
</dependencies>
[xml]

After that, just instantiate your Mirror passing a Sun15ReflectionProvider:

[java]
new Mirror(new Sun15ReflectionProvider());
[/java]

or add the following line to your mirror.properties:

[code]
provider.class = net.vidageek.mirror.provider.sun15.Sun15ReflectionProvider
[/code]

[section Configuration]

There are two ways to configure Mirror. You can instantiate Mirror passing a ::net.vidageek.mirror.provider.ReflectionProvider:: :

[java]
new Mirror(new FakeReflectionProvider());
[/java]

Or you can let Mirror read a property file (mirror.properties) located at your project root folder.

For now, this configuration file will use only the following key:

[list]
* provider.class : This is the full qualifier name of the class implementing ::net.vidageek.mirror.provider.ReflectionProvider::
you want mirror to use.
[/list]

An example:

[code]
provider.class = net.vidageek.mirror.fake.FakeProvider
[/code]

Just to remember, no configuration is needed to use Mirror. It will work just fine without it. 
Use it only if fine is not enough for your needs.
