[chapter Extension]

Now that you know your way around Mirror, maybe you want something more.

[section Reflection Providers]

Basically, all dirty work is handled by a collection of interfaces we call Reflection Providers. 

These are the real Mirror's core.

Today we only have ::net.vidageek.mirror.provider.java.PureJavaReflectionProvider::, that uses only 
**Java Reflection API**.

But you can just implement your own ::net.vidageek.mirror.provider.ReflectionProvider:: to give you
more control over what's happening.

Actually, ::net.vidageek.mirror.provider.ReflectionProvider:: is just a wrapper for more specific
interfaces: 

[list]
* ::net.vidageek.mirror.provider.AnnotatedElementReflectionProvider.java::
* ::net.vidageek.mirror.provider.ClassReflectionProvider.java::
* ::net.vidageek.mirror.provider.ConstructorReflectionProvider.java::
* ::net.vidageek.mirror.provider.FieldReflectionProvider.java::
* ::net.vidageek.mirror.provider.MethodReflectionProvider.java::
[/list]

But how do you make Mirror use your Reflection Provider? Take a look at Extension -> Configuration.

[section Configuration]

There are two ways to configure Mirror. You can instantiate Mirror passing a ::net.vidageek.mirror.provider.ReflectionProvider:: :

[java]
new Mirror(new FakeReflectionProvider());
[/java]

Or you can let Mirror read a property file (mirror.properties) located at your project root folder.

For now, this configuration file will use only the following key:

[list]
* provider.class : This is the full qualifier name of the class implementing ::net.vidageek.mirror.provider.ReflectionProvider::
you want mirror to use.
[/list]

An example:

[code]
provider.class = net.vidageek.mirror.fake.FakeProvider
[/code]

Just to remember, no configuration is needed to use Mirror. It will work just fine without it. 
Use it only if fine is not enough for your needs.
